{"version":3,"sources":["components/Card.js","redux/actions/listActions.js","redux/actions/index.js","redux/actions/cardActions.js","components/AddCardButton.js","components/List.js","components/AddListButton.js","components/board/Board.js","components/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/listReducer.js","redux/reducers/index.js","index.js","redux/configureStore.js"],"names":["styles","card","margin","boxSizing","borderRadius","height","cardBody","padding","fontSize","Card","text","className","style","addList","title","type","CONSTANTS","ADD_LIST","payload","ADD_CARD","addCard","listId","AddCardButton","useState","formOpen","setFormOpen","setText","dispatch","useDispatch","createCard","console","log","handleInputChange","ev","target","value","toggleForm","prev","container","minRows","autoFocus","placeholder","onBlur","onChange","textArea","actionContainer","addCardBtn","onMouseDown","onClick","icon","addAnother","color","cursor","display","alignItems","marginTop","backgroundColor","fontWeight","marginRight","resize","width","border","minWidth","List","id","cards","map","key","AddListButton","createList","form","colort","paddingTop","Board","lists","useSelector","state","list","App","Boolean","window","location","hostname","match","listID","cardId","listReducer","initialState","action","newList","newCard","newState","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90646cc1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ text }) => {\n    return (\n        <div className=\"card\" style={styles.card}>\n            <div className=\"card-body\"  style={styles.cardBody}>\n                {text}\n           </div>\n        </div>\n    );\n\n}\nconst styles = {\n    card: {\n        margin: \"10px\",\n        boxSizing: \"border-box\",\n        borderRadius: \"3px\",\n        height: \"auto\",\n    },\n    cardBody: {\n        padding: \"10px\",\n        fontSize: \"14px\",\n\n    }\n\n}\n\nexport default Card;\n","import { CONSTANTS } from '.';\n\nconst addList = title => {\n  return {\n    type: CONSTANTS.ADD_LIST,\n    payload: title\n  };\n};\n\nexport default addList;\n","export * from './listActions'\nexport * from './cardActions'\n\n\nexport const CONSTANTS = {\n  ADD_CARD: 'ADD_CARD',\n  ADD_LIST: 'ADD_LIST'\n\n};\n","import { CONSTANTS } from '.';\n\nconst addCard = (listId, text) => {\n  return {\n    type: CONSTANTS.ADD_CARD,\n    payload: { text, listId }\n  };\n};\n\nexport default addCard;\n","import React, { useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { useDispatch } from 'react-redux';\nimport addCard from '../redux/actions/cardActions';\n\nexport default function AddCardButton({ listId }) {\n  const [formOpen, setFormOpen] = useState(false);\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n\n  const createCard = () => {\n    console.log(text);\n    setText('');\n    dispatch(addCard(listId, text));\n  };\n\n  const handleInputChange = ev => {\n    setText(ev.target.value);\n  };\n\n  const toggleForm = () => {\n    setFormOpen(prev => !prev);\n    setText('');\n\n  };\n  const formRender = () => (\n    <>\n      <TextareaAutosize\n        minRows={3}\n        autoFocus\n        placeholder='Enter a title for this card...'\n        onBlur={toggleForm}\n        value={text}\n        onChange={handleInputChange}\n        style={styles.textArea}\n      />\n      <div style={styles.actionContainer}>\n        <button\n          className='btn'\n          style={styles.actionContainer.addCardBtn}\n          onMouseDown={createCard}\n        >\n          Add Card\n        </button>\n        <span onClick={toggleForm}>\n          &nbsp;\n          <i\n            className='fas fa-times fa-lg'\n            style={styles.actionContainer.icon}\n          ></i>\n        </span>\n      </div>\n    </>\n  );\n\n  const buttonRender = () => (\n    <p\n      style={styles.addAnother}\n      onClick={() => {\n        setFormOpen(prev => !prev);\n      }}\n    >\n      <i className='fas fa-plus'> </i> &nbsp; Add another card\n    </p>\n  );\n  return (\n    <div style={styles.container}>\n      {formOpen ? formRender() : buttonRender()}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    margin: '1em',\n    color: '#5e6c84'\n  },\n  addAnother: {\n    margin: '0.5em 1em',\n    cursor: 'pointer'\n  },\n  actionContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: '0.5em',\n    addCardBtn: {\n      color: 'white',\n      backgroundColor: '#5aac44',\n      fontWeight: 'bold',\n      marginRight: '1em'\n    },\n    icon: {\n      color: '#6b778c',\n      fontSize: '1.5em',\n      cursor: 'pointer'\n    }\n  },\n\n  textArea: {\n    resize: 'none',\n    width: '100%',\n    border: 'none'\n  }\n};\n","import React from 'react';\nimport Card from './Card';\nimport AddCardButton from './AddCardButton';\n\nconst List = ({ id, title, cards }) => {\n  // const cards = useSelector(state => state.lists);\n\n  return (\n    <div style={styles.container}>\n      <h2 style={styles.title}>{title}</h2>\n      {cards.map(card => (\n        <Card key={card.id} text={card.text} />\n      ))}\n\n      <AddCardButton  listId={id} />\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    backgroundColor: '#ebecf0',\n    marginRight: '1em',\n    boxSizing: 'border-box',\n    borderRadius: '3px',\n    minWidth: '272px'\n  },\n  title: {\n    padding: '10px',\n    fontSize: '1.2em'\n  }\n};\nexport default List;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport addList from '../redux/actions/listActions';\n\n// import TextareaAutosize from 'react-textarea-autosize';\n\nexport default function AddListButton() {\n  const [formOpen, setFormOpen] = useState(false);\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n\n  const createList = () => {\n    console.log(text);\n    dispatch(addList(text));\n    setText('');\n  };\n\n  const handleInputChange = ev => {\n    setText(ev.target.value);\n  };\n\n  const toggleForm = () => {\n    setFormOpen(prev => !prev);\n    setText('');\n  };\n  const formRender = () => (\n    <div style={styles.form}>\n      <input\n        autoFocus\n        placeholder='Enter a list title...'\n        onBlur={toggleForm}\n        value={text}\n        onChange={handleInputChange}\n        style={styles.textArea}\n      />\n      <div style={styles.actionContainer}>\n        <button\n          className='btn'\n          style={styles.actionContainer.addCardBtn}\n          onMouseDown={createList}\n        >\n          Add List\n        </button>\n        <span onClick={toggleForm}>\n          &nbsp;\n          <i\n            className='fas fa-times fa-lg'\n            style={styles.actionContainer.icon}\n          ></i>\n        </span>\n      </div>\n    </div>\n  );\n\n  const buttonRender = () => (\n    <p\n      style={styles.addAnother}\n      onClick={() => {\n        setFormOpen(prev => !prev);\n      }}\n    >\n      <i className='fas fa-plus'> </i> &nbsp; Add another list\n    </p>\n  );\n  return (\n    <div style={styles.container}>\n      {formOpen ? formRender() : buttonRender()}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    minWidth: '272px',\n    color: '#fff'\n  },\n  addAnother: {\n    backgroundColor: 'hsla(0,0%,100%,.24)',\n    padding: '10px',\n    fontSize: '1.1em',\n    colort: 'white',\n    cursor: 'pointer',\n    boxSizing: 'border-box',\n    borderRadius: '3px'\n  },\n  actionContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingTop: '0.5em',\n    addCardBtn: {\n      color: 'white',\n      backgroundColor: '#5aac44',\n      fontWeight: 'bold',\n      marginRight: '1em'\n    },\n    icon: {\n      color: '#42526e',\n      fontSize: '1.5em',\n      cursor: 'pointer'\n    }\n  },\n  form: {\n    backgroundColor: '#ebecf0',\n    padding: '0.5em 0.4em',\n    boxSizing: 'border-box',\n    borderRadius: '3px'\n  },\n  textArea: {\n    padding: '8px 12px',\n    resize: 'none',\n    width: '100%',\n    border: 'none'\n  }\n};\n","import React from 'react';\nimport List from '../List';\nimport './Board.scss';\nimport { useSelector } from 'react-redux';\nimport AddListButton from '../AddListButton';\n\nconst Board = () => {\n  const lists = useSelector(state => state.lists);\n\n\n  return (\n    <div className='list-container mt-4'>\n      {lists.map(list => (\n        <List key={list.id}  id={list.id} title={list.title} cards={list.cards} />\n      ))}\n      <AddListButton  />\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.scss';\nimport Board from './board/Board';\n\nfunction App({ lists }) {\n  return (\n    <div className='container-fluid mt-4'>\n      <h1 style={{ color: 'white' }}>Hello World</h1>\n      <Board />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default [\n    {\n      id: 0,\n      title: 'To Do',\n      cards: [\n        {\n          id: 0,\n          text: 'Finish clone trello project!'\n        },\n        {\n          id: 1,\n          text: 'Finish clone trello project! ASAP'\n        }\n      ]\n    },\n  \n    {\n      id: 1,\n      title: 'Doing',\n      cards: [\n        {\n          id: 2,\n          text: 'Crushing it!'\n        }\n      ]\n    },\n    {\n      id: 2,\n      title: 'Done',\n      cards: [\n        {\n          id: 3,\n          text: 'Be a legend'\n        },\n        {\n          id: 4,\n          text: '100% humble'\n        }\n      ]\n    }\n  ];\n  ","import { CONSTANTS } from '../actions';\nimport initialState from './initialState';\n\nlet listID = 2;\nlet cardId = 4;\n\n\nconst listReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      console.log('REducer', action)\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: ++listID\n      };\n      return [...state, newList];\n\n      case CONSTANTS.ADD_CARD:\n        console.log('CARD REDUCER ', action);\n        const newCard = {\n          id: ++cardId,\n          text: action.payload.text,\n        };\n        console.log('state', state);\n        const newState = state.map(list => {\n          if (list.id === action.payload.listId) {\n            return {\n              ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        console.log('NEW STATE', newState);\n        return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;\n","import { combineReducers } from \"redux\";\nimport listReducer from \"./listReducer\"\n\n  \nconst rootReducer = combineReducers({\n    lists: listReducer,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\"; //applyMiddleware, compose\nimport rootReducer from \"./reducers\";\n// import reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\n// import thunk from \"redux-thunk\";\n\nexport default function configureStore(initialState) {\n    // const composeEnhancers =\n    //     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n\n    return createStore(\n        rootReducer,\n        initialState,\n        // composeEnhancers(applyMiddleware(reduxImmutableStateInvariant()))\n    );\n}\n"],"sourceRoot":""}